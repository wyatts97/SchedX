services:
  app:
    build: .
    command: npm start -w @schedx/app
    ports:
      - "${PORT:-5173}:${PORT:-5173}"
    env_file:
      - .env.docker
    environment:
      - BODY_SIZE_LIMIT=10485760
      - NODE_OPTIONS=--max-http-header-size=65536
      - DOCKER=true
      - NODE_ENV=production
    volumes:
      - uploads-data:/app/packages/schedx-app/uploads
      - db-data:/data
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:${PORT:-5173}/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => process.exit(1));"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - schedx-network

  scheduler:
    build: .
    command: npm start -w @schedx/scheduler
    env_file:
      - .env.docker
    environment:
      - DOCKER=true
      - NODE_ENV=production
    volumes:
      - uploads-data:/app/packages/schedx-app/uploads
      - db-data:/data
    healthcheck:
      test: ["CMD", "pgrep", "node"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - schedx-network

volumes:
  db-data:
  uploads-data:

networks:
  schedx-network:
    driver: bridge